stringLiteral

Simplified BNF to CQL script. The focus here is split in SPACES, WHERE, ITEM-NAME and LITERAL tokens.


Notes:

1-) u(TOKEN) means an uncasesensitive token
2-) ^TOKEN means a not token
3-) %s any text
4-) " must be ignoret, less is /" as a true " symbol eg: "t" means t, /"t/" means "t"

OFICIAL BNF: https://cassandra.apache.org/doc/cql/CQL.html

<CQL>		::= [<SPACES>] <COMMAND> [ <SPACES> <CONDITION>  ] [<LIMIT OPTION>] [ <SPACES>] [<DOT COMMA> [<SPACES>]]

<SPACES> 	::= <SPACE> [<SPACES>]

<SPACE>		::= " "


<COMMAND>	::= <RESERVED WORDS>  [<SELECTOR BLOCK>] [<SPACES>] [<SYMBOL>] [<SPACES>]  [<LITERAL>] [<SPACES>] [<COMMAND>]

<RESERVED WORDS>::= <RESERVED WORD> [<SPACES> <RESERVED WORDS>]

<RESERVED WORD>	::= ADD	|	ALL	|	ALLOW	|	ALTER	|	AND	|	ANY	|	APPLY	|	ASC	|	ASCII	|	AUTHORIZE	|	BATCH	|	BEGIN	|	BIGINT	|	BLOB	|	BOOLEAN	|	BY	|	
CLUSTERING	|	COLUMNFAMILY	|	COMPACT	|	COUNT	|	COUNTER	|	CONSISTENCY	|	CREATE	|	DECIMAL	|	DELETE	|	DESC	|	DOUBLE	|	DROP	|	EACH_QUORUM	|	FILTERING	|
FLOAT	|	FROM	|	GRANT	|	IN	|	INDEX	|	INET	|	INSERT	|	INT	|	INTO	|	KEY	|	KEYSPACE	|	KEYSPACES	|	LEVEL	|	LIMIT	|	LIST	|	LOCAL_ONE	|
LOCAL_QUORUM	|	MAP	|	MODIFY	|	OF	|	ON	|	ONE	|	ORDER	|	PASSWORD	|	PERMISSION	|	PERMISSIONS	|	PRIMARY	|	QUORUM	|	RENAME	|
REVOKE	|	RECURSIVE	|	SUPERUSER	|	SCHEMA	|	SELECT	|	SET	|	STORAGE	|	SUPERUSER	|	TABLE	|	TEXT	|	TIMESTAMP	|	TIMEUUID	|	TO	|	TOKEN	|	THREE	|	
TRUNCATE	|	TTL	|	TWO	|	TYPE	|	UNLOGGED	|	UPDATE	|	USE	|	USER	|	USERS	|	USING	|	UUID	|	VALUES	|	VARCHAR	|	VARINT	|	WITH	|	WRITETIME
Notes:
1-) case insensitive

<FUNCTION>::= <ITEM NAME>[<SPACES>]<START_PARAMETERS>[<SPACES>][<CONDITION-ITEM>][<SPACES>]<END_PARAMETERS>

<START_PARAMETERS>::=(

<END_PARAMETERS>::=)

<CONDITION-ITEM>::= <SELECTOR ITEM>[<SPACES>]<OPTIONAL PAIR SYMBOL>[<SPACES>]<SELECTOR ITEM>

<SELECTOR ITEM>::=<SELECTOR ITEM STRICT> [<SPACES><ALIAS>]

<ALIAS>::=[<AS> <SPACES>] <ENTITY NAME>

<ENTITY NAME> ::= ^<RESERVED WORD> (<ITEM NAME CASE SENSITIVE> | <ITEM NAME CASE INSENSITIVE>)

<AS> :: = AS

<SELECTOR BLOCK> ::= <FIELD VALUE> [[<SPACES>] <COMMA> [<SPACES>] <SELECTOR BLOCK>]

<SELECTOR ITEM STRICT> ::= ^<RESERVED WORD> <FIELD VALUE>

<FIELD NAME DECLARATION> ::= <FIELD VALUE> [<SPACES>] <ALIAS>]

<FIELD VALUE> ::= <FUNCTION> | <ARRAY> | <MAP> | <LITERAL> | <FIELD NAME> 
     
<ACESSOR>	::= .

<ITEM NAME>	::= <ITEM NAME CASE SENSITIVE> | <ITEM NAME CASE INSENSITIVE> | <ASTERISK>


<ITEM NAME CASE SENSITIVE>	::= "<CHARS>" 

<ITEM NAME CASE INSENSITIVE>	::= <CHARS>   
Notes:
1-) If autowrap, output is the same <ITEM NAME CASE SENSITIVE> (Eg: testValue = > "testValue")
2-) If not autowrap, output is lowercase format (Eg: testValue = > testvalue)

<ASTERISK>	::= *

<INJECT>	::= ?

<CHARS>		::= [<CHARS>](a-Z0-9)

<LITERAL>	::= <NUMBER> | <STRING> | <HEXA> | <BOOLEAN>

<BOOLEAN>	::= <TRUE> | <FALSE>

<TRUE> ::= u(TRUE)

<FALSE> ::= u(FALSE)

<HEXA>::= [<SIGN>] <START HEX> <ABSOLUTE HEXA>

<START HEX> ::= u(0X)

<ABSOLUTE HEXA>::= (<HEXA CHAR>|<DIGIT>)[<ABSOLUTE HEXA>]

<HEXA CHAR> :: = u(a-f)

Notes: 
1-) The position of the hyphen will not be validated	

<NUMBER>	::= (0-9)[<NUMBER>]

<STRING>	::= (<SINGLE QUOTED>[<INPUT CHARACTER EXCEPT SINGLE>]<SINGLE QUOTED>) | (<DOUBLE QUOTED>[<INPUT CHARACTER EXCEPT DOUBLE>]<DOUBLE QUOTED>) 

<SINGLE QUOTED> ::= '^'

<DOUBLE QUOTED> ::= /"^/"

<INPUT CHARACTER EXCEPT SINGLE> ::= (^<SINGLE QUOTED>%s)[<INPUT CHARACTER EXCEPT SINGLE>]

<INPUT CHARACTER EXCEPT DOUBLE> ::= (^<DOUBLE QUOTED>%s)[<INPUT CHARACTER EXCEPT DOUBLE>] 

Notes:
1-) Any character except ' unless is part of a double quoted ''  

<SYMBOL> ::= = | < | > | ! | + | - | / | * | ( | ) | { | } | , [ | ]

Notes: The symbols [ , < , >, ] above, dont are from BNF language but from CQL language, because eg: [ is a cql symbol


<OPTIONAL PAIR SYMBOL> ::=  <SYMBOL>[<SYMBOL>]
 
<DOT COMMA>	::= ;

<COMMA> ::= ,

<WHERE>		::= u(WHERE)

<CONDITION>	::= <WHERE>  <CONDITIONS> 

<CONDITIONS>	::= <SPACES><CONDITION-ITEM>[<SPACES> <JOIN CONDITION> <SPACES> <CONDITIONS>]

<JOIN CONDITION>::= <AND> | <OR>

<AND> 	::= u(AND)

<OR>	::= u(OR)

 
Examples:

1-) SELECT * FROM MyColumnFamily;

2-) UPDATE MyColumnFamily SET 'SomeColumn' = 'SomeValue' WHERE KEY = B70DE1D0-9908-4AE3-BE34-5573E5B09F14;
